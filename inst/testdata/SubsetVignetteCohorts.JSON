[
  {
    "cohortId": 1,
    "cohortName": "celcoxib",
    "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1118084))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1118084))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,365,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 0, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,0,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{1 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{1 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
    "json": "{\n  \"ConceptSets\": [\n    {\n      \"id\": 0,\n      \"name\": \"Rx Norm celcoxib\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 1118084,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    }\n  ],\n  \"PrimaryCriteria\": {\n    \"CriteriaList\": [\n      {\n        \"DrugExposure\": {\n          \"CodesetId\": 0\n        }\n      }\n    ],\n    \"ObservationWindow\": {\n      \"PriorDays\": 365,\n      \"PostDays\": 0\n    },\n    \"PrimaryCriteriaLimit\": {\n      \"Type\": \"First\"\n    }\n  },\n  \"QualifiedLimit\": {\n    \"Type\": \"First\"\n  },\n  \"ExpressionLimit\": {\n    \"Type\": \"First\"\n  },\n  \"InclusionRules\": [],\n  \"CensoringCriteria\": [],\n  \"CollapseSettings\": {\n    \"CollapseType\": \"ERA\",\n    \"EraPad\": 0\n  },\n  \"CensorWindow\": {},\n  \"cdmVersionRange\": \">=5.0.0\"\n}"
  },
  {
    "cohortId": 2,
    "cohortName": "GI Bleed",
    "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (192671))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (192671))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Condition Occurrence Criteria\r\nSELECT C.person_id, C.condition_occurrence_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id, C.start_date as sort_date\r\nFROM \r\n(\r\n  SELECT co.person_id,co.condition_occurrence_id,co.condition_concept_id,co.visit_occurrence_id,co.condition_start_date as start_date, COALESCE(co.condition_end_date, DATEADD(day,1,co.condition_start_date)) as end_date \r\n  FROM @cdm_database_schema.CONDITION_OCCURRENCE co\r\n  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Condition Occurrence Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 0, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,0,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{1 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{1 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
    "json": "{\n  \"ConceptSets\": [\n    {\n      \"id\": 0,\n      \"name\": \"Gastrointestinal hemorrhage\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 192671,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    }\n  ],\n  \"PrimaryCriteria\": {\n    \"CriteriaList\": [\n      {\n        \"ConditionOccurrence\": {\n          \"CodesetId\": 0\n        }\n      }\n    ],\n    \"ObservationWindow\": {\n      \"PriorDays\": 0,\n      \"PostDays\": 0\n    },\n    \"PrimaryCriteriaLimit\": {\n      \"Type\": \"First\"\n    }\n  },\n  \"QualifiedLimit\": {\n    \"Type\": \"First\"\n  },\n  \"ExpressionLimit\": {\n    \"Type\": \"First\"\n  },\n  \"InclusionRules\": [],\n  \"CensoringCriteria\": [],\n  \"CollapseSettings\": {\n    \"CollapseType\": \"ERA\",\n    \"EraPad\": 0\n  },\n  \"CensorWindow\": {},\n  \"cdmVersionRange\": \">=5.0.0\"\n}"
  },
  {
    "cohortId": 3,
    "cohortName": "ibuprofen",
    "sql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where (concept_id in (1177480))\r\nUNION  select c.concept_id\r\n  from @vocabulary_database_schema.CONCEPT c\r\n  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id\r\n  WHERE c.invalid_reason is null\r\n  and (ca.ancestor_concept_id in (1177480))\r\n\r\n) I\r\n) C;\r\n\r\nUPDATE STATISTICS #Codesets;\r\n\r\n\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM (-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Drug Exposure Criteria\r\nselect C.person_id, C.drug_exposure_id as event_id, C.start_date, C.end_date,\r\n  C.visit_occurrence_id,C.start_date as sort_date\r\nfrom \r\n(\r\n  select de.person_id,de.drug_exposure_id,de.drug_concept_id,de.visit_occurrence_id,days_supply,quantity,refills,de.drug_exposure_start_date as start_date, COALESCE(de.drug_exposure_end_date, DATEADD(day,de.days_supply,de.drug_exposure_start_date), DATEADD(day,1,de.drug_exposure_start_date)) as end_date \r\n  FROM @cdm_database_schema.DRUG_EXPOSURE de\r\nJOIN #Codesets cs on (de.drug_concept_id = cs.concept_id and cs.codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Drug Exposure Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,365,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n) pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\ncreate table #inclusion_events (inclusion_rule_id bigint,\n\tperson_id bigint,\n\tevent_id bigint\n);\r\n\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM (\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n{0 != 0}?{\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)\r\n}\r\n) Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom ( -- first_ends\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal\r\n\t  from #included_events I\r\n\t  join ( -- cohort_ends\r\n-- cohort exit dates\r\n-- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\r\n    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n) FE;\r\n\r\n\r\nselect person_id, min(start_date) as start_date, DATEADD(day,-1 * 0, max(end_date)) as end_date\r\ninto #final_cohort\r\nfrom (\r\n  select person_id, start_date, end_date, sum(is_start) over (partition by person_id order by start_date, is_start desc rows unbounded preceding) group_idx\r\n  from (\r\n    select person_id, start_date, end_date, \r\n      case when max(end_date) over (partition by person_id order by start_date rows between unbounded preceding and 1 preceding) >= start_date then 0 else 1 end is_start\r\n    from (\r\n      select person_id, start_date, DATEADD(day,0,end_date) as end_date\r\n      from #cohort_rows\r\n    ) CR\r\n  ) ST\r\n) GR\r\ngroup by person_id, group_idx;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n{1 != 0}?{\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n}\r\n{1 != 0 & 0 != 0}?{\r\n\r\nCREATE TABLE #inclusion_rules (rule_sequence int);\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n}\r\n\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n",
    "json": "{\n  \"ConceptSets\": [\n    {\n      \"id\": 0,\n      \"name\": \"Rx Norm ibuprofen\",\n      \"expression\": {\n        \"items\": [\n          {\n            \"concept\": {\n              \"CONCEPT_ID\": 1177480,\n              \"CONCEPT_NAME\": \"\",\n              \"STANDARD_CONCEPT\": \"\",\n              \"STANDARD_CONCEPT_CAPTION\": \"\",\n              \"INVALID_REASON\": \"\",\n              \"INVALID_REASON_CAPTION\": \"\",\n              \"CONCEPT_CODE\": \"\",\n              \"DOMAIN_ID\": \"\",\n              \"VOCABULARY_ID\": \"\",\n              \"CONCEPT_CLASS_ID\": \"\"\n            },\n            \"isExcluded\": false,\n            \"includeDescendants\": true,\n            \"includeMapped\": false\n          }\n        ]\n      }\n    }\n  ],\n  \"PrimaryCriteria\": {\n    \"CriteriaList\": [\n      {\n        \"DrugExposure\": {\n          \"CodesetId\": 0\n        }\n      }\n    ],\n    \"ObservationWindow\": {\n      \"PriorDays\": 365,\n      \"PostDays\": 0\n    },\n    \"PrimaryCriteriaLimit\": {\n      \"Type\": \"First\"\n    }\n  },\n  \"QualifiedLimit\": {\n    \"Type\": \"First\"\n  },\n  \"ExpressionLimit\": {\n    \"Type\": \"First\"\n  },\n  \"InclusionRules\": [],\n  \"CensoringCriteria\": [],\n  \"CollapseSettings\": {\n    \"CollapseType\": \"ERA\",\n    \"EraPad\": 0\n  },\n  \"CensorWindow\": {},\n  \"cdmVersionRange\": \">=5.0.0\"\n}"
  }
]
